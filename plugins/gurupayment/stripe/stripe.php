<?php

// no direct access
defined( '_JEXEC' ) or die( 'Restricted access' );
jimport( 'joomla.plugin.plugin' );

require_once(JPATH_SITE.'/plugins/gurupayment/stripe/stripe/vendor/Stripe.php');
require_once(JPATH_SITE.'/plugins/gurupayment/stripe/stripe/helper.php');

class  plgGurupaymentStripe extends JPlugin
{

	function __construct(& $subject, $config)
	{
		parent::__construct($subject, $config);
		//Set the language in the class
		$config = JFactory::getConfig();

		$doc = JFactory::getDocument();
		$doc->addScript("https://js.stripe.com/v1/");
		$doc->addScript(JURI::root()."plugins/gurupayment/stripe/stripe/tmpl/stripe.js");
		$doc->addStyleSheet(JURI::root()."plugins/gurupayment/stripe/stripe/tmpl/stripe.css");
	}

	/* Internal use functions */
	function buildLayoutPath($layout) {
		$app = JFactory::getApplication();
		$core_file 	= dirname(__FILE__).DS.$this->_name.DS.'tmpl'.DS.'default.php';
		$override		= JPATH_BASE.DS.'templates'.DS.$app->getTemplate().DS.'html'.DS.'plugins'.DS.$this->_type.DS.$this->_name.DS.$layout.'.php';

		if(JFile::exists($override))
		{
			return $override;
		}
		else
		{
	  		return $core_file;
		}
	}
	
	//Builds the layout to be shown, along with hidden fields.
	function buildLayout($vars, $layout = 'default' )
	{
		// Load the layout & push variables
		ob_start();
        $layout = $this->buildLayoutPath($layout);
        include($layout);
        $html = ob_get_contents(); 
        ob_end_clean();
		return $html;
	}

	// Used to Build List of Payment Gateway in the respective Components
	function onTP_GetInfo($config)
	{
		if(!in_array($this->_name,$config))
		return;
		$obj 		= new stdClass;
		$obj->name 	=$this->params->get( 'plugin_name' );
		$obj->id	= $this->_name;
		return $obj;
	}

	//Constructs the Payment form in case of On Site Payment gateways like Auth.net & constructs the Submit button in case of offsite ones like Paypal
	function onTP_GetHTML($vars)
	{
		//$vars->action_url = plgPaymentStripeHelper::buildPaypalUrl();
		//Take this receiver email address from plugin if component not provided it
		//if(empty($vars->business))
		//$vars->business = $this->params->get('business');
		
		$html = $this->buildLayout($vars);

		return $html;
	}

	function onSendPayment(&$post){
		if($post['processor'] != 'stripe'){
			return false;
		}

		$params = json_decode($post["params"], true);

		$_SESSION["stripe_first_name"] = JFactory::getApplication()->input->get("stripe_first_name", "", "raw");
		$_SESSION["stripe_last_name"] = JFactory::getApplication()->input->get("stripe_last_name", "", "raw");
		$_SESSION["stripe_card_number"] = JFactory::getApplication()->input->get("stripe_card_number", "", "raw");
		$_SESSION["stripe_cvc"] = JFactory::getApplication()->input->get("stripe_cvc", "", "raw");
		$_SESSION["stripe_month"] = JFactory::getApplication()->input->get("stripe_month", "", "raw");
		$_SESSION["stripe_year"] = JFactory::getApplication()->input->get("stripe_year", "", "raw");

		$link_params = array();
		$link_params['option'] = $post['option'];
		$link_params['controller'] = $post['controller'];
		$link_params['task'] = $post['task'];
		$link_params['processor'] = $post['processor'];
		$link_params['order_id'] = @$post['order_id'];
		$link_params['sid'] = @$post['sid'];
		$link_params['Itemid'] = isset($post['Itemid']) ? $post['Itemid'] : '0';
		$notify_url = JURI::base().'index.php?'.$this->StripeArray2Url($link_params).'&customer_id='.intval($post['customer_id']).'&pay=ipn';

		$vars = new stdClass();
		$vars->notify_url = $notify_url;
		$vars->item_name = "";
		$vars->amount = "";

		$product_names = array();

		foreach($post['products'] as $i => $item){
			if ($i < 0){
				continue;
			}

            $product_names[] = $item["name"];
        }

        if(count($product_names) > 0){
        	$vars->item_name = implode(", ", $product_names);
        }

        $db = JFactory::getDbo();
		$sql = "select `userid`, `amount`, `amount_paid` from #__guru_order where `id`=".intval($link_params['order_id']);
		$db->setQuery($sql);
		$db->query();
		$order_details = $db->loadAssocList();
		
		$customer_id = $order_details["0"]["userid"];
		$gross_amount = $order_details["0"]["amount"];
		
		if($order_details["0"]["amount_paid"] != -1){
			$gross_amount = $order_details["0"]["amount_paid"];
		}

		$vars->amount = $gross_amount;

		ob_start();
        $layout = $this->buildLayoutPath("default");
        include($layout);
        $html = ob_get_contents(); 
        ob_end_clean();

		return $html;
	}
	
	function onReceivePayment($data) 
	{
		if($data['processor'] != 'stripe'){
			return 0;
		}
		
		// load the stripe libraries
		require_once(JPATH_SITE.'/plugins/gurupayment/stripe/stripe/vendor/Stripe.php');
		
		// retrieve the token generated by stripe.js
		$token = $_POST['stripeToken'];
		$secret_key = $this->params->get("secret_key");
		
		$amount = $_POST["amount"];
		$currency = $_POST["currency"];
		$user_email = $_POST["user_email"];
		$description = $_POST["description"];
		$order_id = $_GET["order_id"];

		$db = JFactory::getDbo();
		$sql = "select `userid`, `amount`, `amount_paid` from #__guru_order where `id`=".intval($order_id);
		$db->setQuery($sql);
		$db->query();
		$order_details = $db->loadAssocList();
		
		$customer_id = $order_details["0"]["userid"];
		$gross_amount = $order_details["0"]["amount"];
		
		if($order_details["0"]["amount_paid"] != -1){
			$gross_amount = $order_details["0"]["amount_paid"];
		}
		
		require_once(JPATH_SITE . '/components/com_guru/models/gurubuy.php');
		$guru_buy_model = new guruModelguruBuy();
		$submit_array = array("customer_id" => intval($customer_id), "order_id" => intval($order_id), "price" => $gross_amount);

		// attempt to charge the customer's card
		try {
			Stripe::setApiKey($secret_key);

			// Create a Customer:
			$customer = Stripe_Customer::create(array(
			  "email" => $user_email,
			  "card" => $token,
			  "description" => $description
			));

			$response = new stdClass();

			$response->data = Stripe_Charge::create(array(
					'amount' => $amount,
					'currency' => $currency,
					"customer" => $customer->id,
					"description" => $description
				)
			);

			// redirect on successful payment
			$response = (array)$response->data;
			$json = array();
			$user = JFactory::getUser();

			foreach($response as $key=>$value){
				if(strpos($key, "_values") !== FALSE){
					$json = $value;
				}
			}

			if($json["paid"] == 1){
				$guru_buy_model->proccessSuccess("guruBuy", $submit_array, false);
			}
			
		} catch (Exception $e) {
			$guru_buy_model->proccessFail("guruBuy", $submit_array);
		}

	}	
	
	//@JOMSOCIALHACK - When I pay with paypal or authorize, the transaction is missing - start
	public function onTP_UpdatePayment($args){
		/*$db 	= JFactory::getDBO();
		$sql 	= "	UPDATE #__digistore_paypal_expresscheckout_log SET order_id = ".$args['order_id'].", status = 1 WHERE `user_id` = " . $args['customer_id'] . " AND `cart_sid` = " . $args['sid'] . " AND status = 0";
		$db->setQuery($sql);
		$db->execute();
		//if($db->getErrorNum()){
		//	echo $db->getErrorMsg(); exit;
		//}
		return true;*/
	}	
	//@JOMSOCIALHACK - When I pay with paypal or authorize, the transaction is missing - end	
	
	function translateResponse($payment_status){
		/*foreach($this->responseStatus as $key=>$value)
		{
			if($key==$payment_status)
			return $value;		
		}*/
	}

	function onTP_Storelog($data)
	{
		/*$log = plgPaymentPaypalHelper::Storelog($this->_name,$data);*/
	}

	function onAfterRender(){
		$body = JResponse::getBody();

		$lang = JFactory::getLanguage();
		$extension = 'plg_gurupayment_stripe';
		$base_dir = JPATH_ADMINISTRATOR;
		$language_tag = '';
		$lang->load($extension, $base_dir, $language_tag, true);

		$user = JFactory::getUser();
		$name = $user->name;
		$first_name = "";
		$last_name = "";

		if(isset($name) && trim($name) != ""){
			$name_array = explode(" ", $name);

			if(count($name_array) > 1){
				$last_name = $name_array[count($name_array) - 1];
				unset($name_array[count($name_array) - 1]);
				$first_name = implode(" ", $name_array);
			}
			else{
				$first_name = $name;
			}
		}

		$years = "";
		$current_year = date("Y");
		
		$years .= '<option value="'.$current_year.'">'.$current_year.'</option>';

		for($i=1; $i<=30; $i++){
			$current_year ++;
			$years .= '<option value="'.$current_year.'">'.$current_year.'</option>';
		}

		$stripe_form = '
			<div id="stripe-form" style="display:none;">
				<div class="stripe-cart-title">'.JText::_("PLG_STRIPE_CREDIT_CARD_INFO").'</div>
				<div class="form-row">
					<label>'.JText::_("PLG_STRIPE_FIRST_NAME").' <span class="red-star">*</span></label>
					<input type="text" name="stripe_first_name" class="stripe-input input-name stripe_first_name" value="'.$first_name.'" onkeyup="javascript:validateCheckout();" />
				</div>

				<div class="form-row">
					<label>'.JText::_("PLG_STRIPE_LAST_NAME").' <span class="red-star">*</span></label>
					<input type="text" name="stripe_last_name" class="stripe-input input-name stripe_last_name" value="'.$last_name.'" onkeyup="javascript:validateCheckout();" />
				</div>

				<div class="form-row">
					<label>'.JText::_("PLG_STRIPE_CARD_NUMBER").' <span class="red-star">*</span></label>
					<input type="text" name="stripe_card_number" size="20" autocomplete="off" class="stripe-input card-number" onkeyup="javascript:validateCheckout();" />
				</div>

				<div class="form-row">
					<label>'.JText::_("PLG_STRIPE_CVC").' <span class="red-star">*</span></label>
					<input type="text" name="stripe_cvc" size="4" autocomplete="off" class="stripe-input card_cvc card-cvc" onkeyup="javascript:validateCheckout();" />
				</div>

				<div class="form-row">
					<label>'.JText::_("PLG_STRIPE_EXPIRATION").' <span class="red-star">*</span></label>
					
					<select name="stripe_month" class="stripe-select card-month card-expiry-month" onchange="javascript:validateCheckout();">
						<option value="01"> 01 </option>
						<option value="02"> 02 </option>
						<option value="03"> 03 </option>
						<option value="04"> 04 </option>
						<option value="05"> 05 </option>
						<option value="06"> 06 </option>
						<option value="07"> 07 </option>
						<option value="08"> 08 </option>
						<option value="09"> 09 </option>
						<option value="10"> 10 </option>
						<option value="11"> 11 </option>
						<option value="12"> 12 </option>
					</select>
					
					<span> / </span>
					
					<select name="stripe_year" class="stripe-select card-expiry-year" onchange="javascript:validateCheckout();">
					'.$years.'
					</select>
				</div>

				<input type="hidden" id="hidden-firstname" name="firstname" value="" />
				<input type="hidden" id="hidden-lastname" name="lastname" value="" />
				<input type="hidden" id="public-key" value="'.$this->params->get("publishable_key").'" />

				<input type="hidden" id="lang-first-name" value="'.str_replace('"', '&quot;', JText::_("PLG_FIRST_NAME_INVALID")).'" />
				<input type="hidden" id="lang-last-name" value="'.str_replace('"', '&quot;', JText::_("PLG_LAST_NAME_INVALID")).'" />
				<input type="hidden" id="lang-card" value="'.str_replace('"', '&quot;', JText::_("PLG_CARD_INVALID")).'" />
				<input type="hidden" id="lang-card-code" value="'.str_replace('"', '&quot;', JText::_("PLG_CARD_CODE")).'" />

				<input type="hidden" id="stripe-site-root" value="'.JURI::root().'" />

				<div class="payment-errors"></div>

				<div class="form-row">
					<button type="button" id="stripe-checkout" class="uk-button uk-button-default uk-width-1-1 uk-padding-remove stripe-invalid-checkout" onclick="if(jQuery(\'#processor\').val() == \'\'){ ShowPaymentAlert(); return false; }jQuery(\'#returnpage\').val(\'checkout\'); jQuery(\'#type_button\').val(\'checkout\');jQuery(\'#returnpage\').val(\'login_register\'); jQuery(\'#type_button\').val(\'checkout\');validateStripeCart();">Checkout</button>
				</div>

				<div class="stripe-loading" style="display:none;"><img src="'.JURI::root().'/plugins/gurupayment/stripe/stripe/tmpl/ellipsis_big.gif" alt=""></div>
			</div>
		';

		$body = str_replace('id="processor"', 'id="processor" onchange="javascript:digiChangePayment(this.value);"', $body);
		$body = str_replace('</body>', $stripe_form.'</body>', $body);
		$body = str_replace('id="adminForm"', 'id="adminForm" onsubmit="return validateStripeCart();"', $body);
		$body = str_replace('onclick="document.adminForm.submit();"', 'onclick="javascript:validateStripeCart();"', $body);
		
		JResponse::setBody($body);
	}

	function onAjaxGurupaymentStripe(){
		$action = JRequest::getVar("action", "");

		$lang = JFactory::getLanguage();
		$extension = 'plg_gurupayment_stripe';
		$base_dir = JPATH_ADMINISTRATOR;
		$language_tag = '';
		$lang->load($extension, $base_dir, $language_tag, true);

		if($action == "setUserName"){
			$firstname = JRequest::getVar("firstname", "");
			$lastname = JRequest::getVar("lastname", "");
			$customer = array("firstname"=>$firstname, "lastname"=>$lastname);
			$_SESSION["new_customer"] = $customer;
			die(true);
		}
		elseif($action == "validateToken"){
			require_once(JPATH_SITE.'/plugins/gurupayment/stripe/stripe/vendor/Stripe.php');
		
			// retrieve the token generated by stripe.js
			$token = JRequest::getVar("token", "");
			$secret_key = $this->params->get("secret_key");
			
			// attempt to charge the customer's card
			try {
				Stripe::setApiKey($secret_key);
				$user = JFactory::getUser();
				$email = "";

				if(isset($user->email) && trim($user->email) != ""){
					$email = $user->email;
				}

				// Create a Customer:
				$customer = Stripe_Customer::create(array(
					"email" => $email,
					"card" => $token
				));

				die(true);
			}
			catch (Exception $e) {
				$msg = $e->getMessage();

				if(strpos($msg, "declined") !== FALSE){
					die(JText::_("PLG_CARD_CODE"));
				}
				elseif(strpos($msg, "expir") !== FALSE){
					die(JText::_("PLG_CARD_EXPIRATION"));
				}
				else{
					die($msg);
				}
			}
		}
    }

    function StripeArray2Url($param){
		foreach($param AS $k => $v){
			$out[] = "$k=$v";
		}
		return implode('&', $out );
	}
}